{"version":3,"file":"index.js","sources":["../src/index.tsx"],"sourcesContent":["/**\n * @module react-storage-hook\n */\n\n/**\n *\n */\n\nimport { fromJS } from 'immutable'\nimport * as React from 'react'\n\n/**\n * @hidden\n */\nconst Immutable = { fromJS }\n\n/**\n * An immutableValue is a value that would be returned\n * by immutable.js's [immutable.fromJS](https://github.com/immutable-js/immutable-js/wiki/Converting-from-JS-objects).\n */\ntype immutableValue = any\n\n/**\n * @hidden\n */\ntype setStored<Kind> = (newValue: Kind) => void\n\n/**\n * useStorage is a react hook providing integration and synchronization with\n * localStorage. The value returned will likely not be the same type as input,\n * unless the input type is an immutable value that\n * would be produced by immutable.js.\n *\n * The output value will always be an [[immutableValue]] of the kind produced by\n * immutable.js.\n * @param name The key used to store the data in.\n * @param InputType An optional type used for the stored value. This is only a type assertion on the input. The output type will always be a value returned by Immutable.fromJS.\n */\nexport const useStorage = <InputType extends {}>(name: string, {\n   /**\n    * The default value if no stored value is found.\n    */\n    placeholder,\n\n   /**\n    * The Storage used. Defaults to localStorage.\n    */\n    storageArea = window.localStorage\n} : {\n    placeholder: InputType, storageArea: Storage\n  }): [immutableValue, setStored<InputType>] => {\n    const currentItem = storageArea.getItem(name)\n    const [value, setValue] = React.useState(\n      currentItem?\n      Immutable.fromJS(currentItem):\n      placeholder\n    )\n\n    const onStorage = ({ key, oldValue, newValue, storageArea: eventStorageArea }:\n                       Pick<StorageEvent, 'key' | 'oldValue' | 'newValue' | 'storageArea'>) => {\n    // if it's not our record, the value has not changed, or it's for another storage area we skip\n    // there could, or perhaps *should* be an extra check for if our local value differs from\n    // the stored value, but this should be handled internally via React.\n    if (key !== name || newValue == null || oldValue === newValue || storageArea !== eventStorageArea) return\n    return setValue(Immutable.fromJS(JSON.parse(newValue)))\n  }\n\n  const setStorage = (value: InputType) => {\n    const oldValue = storageArea.getItem(name)\n    const newValue = JSON.stringify(value)\n    storageArea.setItem(name, newValue)\n    // fire our own onStorage event\n    // because onStorage only fires between windows\n    onStorage({\n      key: name,\n      newValue,\n      oldValue,\n      storageArea\n    })\n  }\n\n\n  // listen to storage events on mount and unmount\n  React.useEffect(() => {\n    window.addEventListener('storage', onStorage)\n    return () => {\n      window.removeEventListener('storage', onStorage)\n    }\n  }, [])\n\n  return [value, setStorage]\n}\n\nexport default useStorage;\n"],"names":["fromJS","React.useState","React.useEffect"],"mappings":";;;;;;;AAAA;;;AAIA,AAOA;;;AAGA,MAAM,SAAS,GAAG,UAAEA,gBAAM,EAAE,CAAA;;;;;;;;;;;;AAwB5B,MAAa,UAAU,GAAG,CAAuB,IAAY,EAAE;;;;AAI3D,WAAW;;;;AAKX,WAAW,GAAG,MAAM,CAAC,YAAY,EAGlC;IACC,MAAM,WAAW,GAAG,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;IAC7C,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAGC,cAAc,CACtC,WAAW;QACX,SAAS,CAAC,MAAM,CAAC,WAAW,CAAC;QAC7B,WAAW,CACZ,CAAA;IAED,MAAM,SAAS,GAAG,CAAC,EAAE,GAAG,EAAE,QAAQ,EAAE,QAAQ,EAAE,WAAW,EAAE,gBAAgB,EACW;;;;QAItF,IAAI,GAAG,KAAK,IAAI,IAAI,QAAQ,IAAI,IAAI,IAAI,QAAQ,KAAK,QAAQ,IAAI,WAAW,KAAK,gBAAgB;YAAE,OAAM;QACzG,OAAO,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAA;KACxD,CAAA;IAED,MAAM,UAAU,GAAG,CAAC,KAAgB;QAClC,MAAM,QAAQ,GAAG,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;QAC1C,MAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAA;QACtC,WAAW,CAAC,OAAO,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAA;;;QAGnC,SAAS,CAAC;YACR,GAAG,EAAE,IAAI;YACT,QAAQ;YACR,QAAQ;YACR,WAAW;SACZ,CAAC,CAAA;KACH,CAAA;;IAIDC,eAAe,CAAC;QACd,MAAM,CAAC,gBAAgB,CAAC,SAAS,EAAE,SAAS,CAAC,CAAA;QAC7C,OAAO;YACL,MAAM,CAAC,mBAAmB,CAAC,SAAS,EAAE,SAAS,CAAC,CAAA;SACjD,CAAA;KACF,EAAE,EAAE,CAAC,CAAA;IAEN,OAAO,CAAC,KAAK,EAAE,UAAU,CAAC,CAAA;CAC3B;;;;;"}